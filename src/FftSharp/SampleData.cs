using System;
using System.Drawing;
using System.Numerics;

namespace FftSharp
{
    public static class SampleData
    {
        public static double[] Times(int sampleRate, int pointCount)
        {
            double periodSec = 1.0 / sampleRate;
            double[] times = new double[pointCount];
            for (int i = 0; i < pointCount; i++)
                times[i] = i * periodSec;
            return times;
        }

        public static double[] OddSines(int pointCount = 128, int sineCount = 2)
        {
            double[] values = new double[pointCount];
            for (int i = 0; i < pointCount; i++)
            {
                for (int s = 0; s < sineCount; s++)
                {
                    double mult = 1 + 2 * s;
                    values[i] += 1 / mult * Math.Sin(mult * i / Math.PI);
                }
            }
            return values;
        }

        public static void AddSin(double[] data, int sampleRate, double frequency, double magnitude = 1)
        {
            for (int i = 0; i < data.Length; i++)
                data[i] += Math.Sin(i * frequency / sampleRate * 2 * Math.PI) * magnitude;
        }

        public static void AddOffset(double[] data, double offset = 0)
        {
            for (int i = 0; i < data.Length; i++)
                data[i] += offset;
        }

        public static void AddWhiteNoise(double[] data, double magnitude = 1, int? seed = 0, double offset = 0)
        {
            Random rand = (seed.HasValue) ? new Random(seed.Value) : new Random();
            for (int i = 0; i < data.Length; i++)
                data[i] += (rand.NextDouble() - .5) * magnitude + offset;
        }

        public static double[] WhiteNoise(int pointCount, double magnitude = 1, int? seed = 0)
        {
            Random rand = (seed.HasValue) ? new Random(seed.Value) : new Random();
            double[] data = new double[pointCount];
            for (int i = 0; i < data.Length; i++)
                data[i] += (rand.NextDouble() - .5) * magnitude;
            return data;
        }

        public static double[] SampleAudio1()
        {
            /* This sample data was created to serve as a standard sample to test
             * this library against other similar libraries, including libraries for
             * other programming languages.
             * 
             * These data simulate a sample of audio with the following parameters:
             *   sample rate: 48 kHz
             *   points: 512 (2^9)
             *   offset: 0.1 (above zero)
             *   tone: 2 kHz (amplitude 2)
             *   tone: 10 kHz (amplitude 10)
             *   tone: 20 kHz (amplitude .5)
             */

            double[] values =
            {
                +0.33, +2.15, +1.44, +1.37, +0.24, +2.60, +3.51, +1.98, +1.88, +0.08, +1.82, +1.30, +0.23, -1.16, -1.35, -0.58,
                -0.84, -1.35, -2.72, -2.53, -0.02, -0.76, -0.48, -2.10, +0.30, +1.86, +1.60, +1.49, +0.58, +2.12, +2.79, +1.99,
                +1.20, +0.80, +2.18, +1.60, -0.37, -1.25, -1.99, +0.35, -1.19, -1.62, -3.28, -2.57, +0.07, -0.81, -1.13, -1.68,
                -0.25, +1.55, +1.08, +1.53, +0.65, +2.53, +2.79, +2.42, +1.72, +0.54, +2.39, +1.51, +0.22, -1.42, -1.44, +0.29,
                -1.61, -1.50, -3.23, -2.20, -0.01, -1.39, -0.47, -1.65, +0.25, +2.05, +1.48, +0.91, +0.76, +2.76, +2.73, +2.45,
                +1.09, +0.28, +2.07, +1.16, +0.27, -1.17, -1.50, +0.20, -0.91, -1.58, -2.46, -2.55, -0.31, -0.94, -1.13, -1.85,
                +0.42, +1.56, +0.85, +0.88, +0.66, +2.73, +3.23, +2.47, +1.12, +0.74, +1.60, +1.73, +0.28, -1.54, -2.18, -0.50,
                -1.09, -1.39, -2.91, -2.69, -0.16, -1.04, -1.24, -1.52, -0.39, +1.69, +1.52, +0.87, +0.31, +2.75, +3.56, +2.53,
                +1.29, +0.33, +1.81, +1.34, +0.13, -1.58, -2.05, -0.11, -0.85, -1.73, -3.30, -2.10, -0.43, -0.67, -1.34, -1.43,
                +0.22, +2.16, +1.35, +1.38, +0.21, +2.23, +3.21, +1.79, +1.90, +0.38, +1.60, +1.10, +0.44, -1.07, -1.69, -0.09,
                -0.73, -2.26, -2.89, -2.68, -0.02, -0.96, -0.89, -1.58, +0.27, +2.33, +0.97, +0.87, +0.50, +2.52, +2.82, +1.61,
                +1.13, -0.04, +1.98, +1.28, -0.38, -1.24, -1.52, -0.40, -0.79, -2.31, -2.89, -1.88, +0.16, -1.59, -0.81, -1.86,
                +0.57, +1.92, +1.44, +1.13, +0.45, +3.02, +3.49, +2.51, +1.15, -0.06, +2.43, +1.01, +0.48, -1.09, -1.55, -0.09,
                -1.35, -1.35, -3.37, -2.15, -0.71, -1.41, -0.97, -1.55, -0.14, +1.64, +0.91, +1.59, +0.17, +2.65, +3.16, +2.20,
                +1.24, -0.17, +1.63, +1.71, +0.31, -0.74, -1.68, -0.35, -1.43, -1.87, -3.20, -1.95, -0.34, -0.97, -1.15, -1.76,
                -0.16, +2.33, +1.28, +0.81, +1.02, +3.00, +2.76, +2.31, +0.99, -0.00, +1.60, +0.94, +0.33, -1.53, -1.49, +0.04,
                -1.13, -2.10, -2.56, -1.98, -0.39, -0.70, -0.66, -1.67, -0.06, +2.11, +1.09, +1.45, +1.03, +2.65, +2.69, +2.16,
                +1.89, +0.68, +2.07, +0.97, -0.40, -1.08, -1.66, -0.23, -0.83, -2.02, -2.61, -2.32, -0.00, -1.07, -0.94, -1.97,
                +0.23, +1.89, +0.98, +1.06, +0.83, +2.50, +3.52, +1.88, +1.09, -0.04, +2.19, +1.04, +0.13, -1.12, -1.56, -0.12,
                -1.60, -1.90, -3.28, -1.98, -0.27, -0.90, -0.83, -2.12, +0.17, +1.79, +1.66, +0.93, +0.15, +2.32, +3.23, +2.34,
                +1.15, +0.07, +1.55, +1.28, -0.11, -0.79, -1.51, -0.08, -0.75, -2.14, -2.45, -1.99, +0.06, -1.14, -0.62, -1.78,
                +0.15, +1.64, +1.09, +1.20, +0.45, +2.70, +3.20, +2.47, +1.81, +0.11, +2.21, +1.18, +0.07, -0.83, -2.12, +0.30,
                -1.18, -1.48, -2.45, -2.57, -0.34, -1.28, -1.28, -1.87, +0.22, +1.92, +1.58, +1.17, +0.79, +2.83, +2.72, +1.64,
                +1.51, +0.44, +2.10, +1.65, +0.46, -1.39, -1.96, -0.01, -1.04, -2.26, -2.87, -1.85, -0.67, -1.13, -1.40, -1.98,
                +0.59, +1.37, +1.00, +0.84, +0.55, +2.61, +3.46, +1.76, +1.02, -0.04, +2.31, +1.67, +0.35, -1.39, -2.16, -0.48,
                -1.52, -1.76, -2.67, -2.01, -0.60, -1.21, -1.42, -1.85, +0.08, +1.69, +1.27, +1.22, +0.83, +2.23, +2.70, +1.68,
                +1.42, +0.56, +1.91, +1.55, +0.06, -1.55, -1.75, -0.57, -0.92, -1.99, -2.70, -2.13, -0.37, -1.06, -0.63, -1.71,
                +0.51, +1.74, +1.48, +1.39, +0.78, +2.27, +3.52, +2.13, +1.89, -0.14, +2.08, +0.99, +0.57, -1.19, -1.90, +0.32,
                -1.64, -1.70, -3.09, -1.84, +0.03, -1.15, -0.80, -2.04, +0.59, +2.02, +0.72, +1.69, +0.73, +2.38, +3.42, +2.48,
                +1.42, -0.01, +2.04, +1.22, -0.02, -1.11, -1.95, -0.32, -0.87, -1.55, -2.67, -2.44, -0.30, -1.18, -1.39, -1.80,
                +0.52, +2.11, +1.32, +1.63, +0.27, +2.88, +3.16, +1.99, +1.64, +0.53, +2.12, +0.90, -0.22, -1.59, -1.45, +0.05,
                -1.46, -1.73, -2.76, -2.06, +0.10, -1.56, -0.92, -1.60, -0.14, +1.35, +0.83, +0.88, +0.76, +2.30, +3.16, +2.11,
            };

            return values;
        }
    }
}
